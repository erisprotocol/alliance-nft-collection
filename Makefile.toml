[config]
# Set this to `false` to run the tasks at workspace root directory and not on the members
default_to_workspace = false
# Set this to `true` to avoid clashes with core commands (e.g. `cargo make publish` vs `cargo publish`)
skip_core_tasks = true

[tasks.fmt]
command = "cargo"
args = ["fmt", "--all", "--check"]

[tasks.fmt-apply]
command = "cargo"
args = ["fmt"]

[tasks.test]
command = "cargo"
args = ["test", "--locked"]

[tasks.lint]
command = "cargo"
args = ["clippy", "--tests", "--", "-D", "warnings"]

[tasks.build]
command = "cargo"
args = ["build", "--release", "--locked", "--target", "wasm32-unknown-unknown"]

[tasks.schema]
command = "cargo"
args = ["schema"]

[tasks.optimize]
script = """
if [[ $(arch) == "arm64" ]]; then
  image="cosmwasm/workspace-optimizer-arm64"
else
  image="cosmwasm/workspace-optimizer"
fi

docker run --rm -v "$(pwd)":/code \
  --mount type=volume,source="$(basename "$(pwd)")_cache",target=/code/target \
  --mount type=volume,source=registry_cache,target=/usr/local/cargo/registry \
  ${image}:0.14.0
"""

[tasks.test-cover]
script = """docker run --security-opt seccomp=unconfined -v "${PWD}:/volume" xd009642/tarpaulin"""

[tasks.deploy]
script = """
ts-node ./scripts/deploy.ts
"""

[tasks.instantiate]
script = """
ts-node ./scripts/instantiate.ts
"""
[tasks.mint]
script = """
ts-node ./scripts/mint.ts
"""